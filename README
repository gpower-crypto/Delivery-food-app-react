# React

## Parcel

### Features

- **Dev Build**: Develop with ease using the development build.
- **Local Server**: Run a local server for testing and development.
- **HMR (Hot Module Replacement)**: Instantly view the changes without a full reload.
- **File Watching Algorithm**: Optimized in C++ for efficient file monitoring.
- **Caching**: Speed up builds with intelligent caching.
- **Image Optimization**: Automatically optimize your images.
- **Minification**: Minify your code for production.
- **Bundling**: Bundle your assets for better performance.
- **Compression**: Compress your files to reduce bandwidth.
- **Consistent Hashing**: Ensure consistent hashing for assets.
- **Code Splitting**: Split code for better loading times.
- **Differential Bundling**: Support older browsers with targeted bundling.
- **Diagnostic**: Gain insights with diagnostic tools.
- **Error Handling**: Handle errors gracefully.
- **HTTPs**: Support secure connections.
- **Tree Shaking**: Remove unused code for a leaner bundle.
- **Different dev and prod bundles**: Tailor your builds for development and production environments.

# Namaste Food

## Structure

```plaintext
- Header
  - Logo
  - Nav Items
- Body
  - Search
  - RestaurantContainer
    - RestaurantCard
      - Img
      - Name of Res, Star Rating, Cuisine, Delivery Time
- Footer
  - Copyright
  - Links
  - Address
  - Contact
```

### Export/Import Patterns

#### Default Export/Import

```javascript
export default Component;
import Component from "path";
```

#### Named Export/Import

```javascript
export const Component;
import { Component } from "path";
```

# React Hooks

Explore the power of React hooks, offering supercharged state variables and more.

- `useState()`: Superpowerful state variables in React.
- `useEffect()`: Perform side effects in functional components.

# Routing in Web Apps

Learn about the two types of routing in web applications:

- **Client Side Routing**
- **Server Side Routing**

# Redux Toolkit

Supercharge your state management with Redux Toolkit.

1. Install `@reduxjs/toolkit` and `react-redux`.
2. Build your store.
3. Connect your store to your app.
4. Create slices (e.g., `cartSlice`).
5. Dispatch actions.
6. Use selectors to retrieve data.

# Types of Testing (Developer)

Get familiar with different types of testing for developers:

- **Unit Testing**
- **Integration Testing**
- **End to End Testing (e2e testing)**

# Setting up Testing in Our App

Follow these steps to set up testing in your app:

1. Install React Testing Library.
2. Install Jest.
3. Install Babel dependencies.
4. Configure Babel.
5. Update Parcel Config file to disable default Babel transpilation.
6. Initialize Jest with `npx jest --init`.
7. Install jsdom library.
8. Install `@babel/preset-react` to make JSX work in test cases.
9. Include `@babel/preset-react` in your Babel config.
10. Install `@testing-library/jest-dom`.

Feel free to explore each section for detailed information and happy coding! ðŸš€
